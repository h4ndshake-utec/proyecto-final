{"ast":null,"code":"var _jsxFileName = \"/Users/MrRobot/laab-project-v1/src/Api.js\";\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      data: []\n    };\n  }\n  /* Cuando extraemos datos de la API, queremos usar componentDidMount, \n  porque queremos asegurarnos de que el componente se haya renderizado en el DOM antes de traer los datos. \n  En el siguiente fragmento, verá cómo traemos datos de la API de Wikipedia y los mostramos en la página.*/\n  componentDidMount() {\n    const url = \"https://en.wikipedia.org/w/api.php?action=opensearch&search=Seona+Dancing&format=json&origin=*&limit=1\";\n    fetch(url).then(result => result.json()).then(result => {\n      this.setState({\n        data: result\n      });\n    });\n  }\n  render() {\n    const {\n      data\n    } = this.state;\n    const result = data.map((entry, index) => {\n      console.log(entry);\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: entry\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 20\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: result\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 43\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 16\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","App","state","data","componentDidMount","url","fetch","then","result","json","setState","render","map","entry","index","console","log"],"sources":["/Users/MrRobot/laab-project-v1/src/Api.js"],"sourcesContent":["import React, { Component } from 'react';\n\nclass App extends Component {\n    state = {\n        data: []\n    };\n    /* Cuando extraemos datos de la API, queremos usar componentDidMount, \n    porque queremos asegurarnos de que el componente se haya renderizado en el DOM antes de traer los datos. \n    En el siguiente fragmento, verá cómo traemos datos de la API de Wikipedia y los mostramos en la página.*/\n    componentDidMount() {\n        const url = \"https://en.wikipedia.org/w/api.php?action=opensearch&search=Seona+Dancing&format=json&origin=*&limit=1\";\n       \n        \n        fetch(url)\n            .then(result => result.json())\n            .then(result => {\n                this.setState({\n                    data: result\n                })\n            });\n    }\n\n    render() {\n        const { data } = this.state;\n\n        const result = data.map((entry, index) => {\n            console.log(entry);\n            return <li key={index}>{entry}</li>;\n        });\n\n        return <div className=\"container\"><ul>{result}</ul></div>;\n    }\n}\n\nexport default App;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AAAC;AAEzC,MAAMC,GAAG,SAASD,SAAS,CAAC;EAAA;IAAA;IAAA,KACxBE,KAAK,GAAG;MACJC,IAAI,EAAE;IACV,CAAC;EAAA;EACD;AACJ;AACA;EACIC,iBAAiB,GAAG;IAChB,MAAMC,GAAG,GAAG,wGAAwG;IAGpHC,KAAK,CAACD,GAAG,CAAC,CACLE,IAAI,CAACC,MAAM,IAAIA,MAAM,CAACC,IAAI,EAAE,CAAC,CAC7BF,IAAI,CAACC,MAAM,IAAI;MACZ,IAAI,CAACE,QAAQ,CAAC;QACVP,IAAI,EAAEK;MACV,CAAC,CAAC;IACN,CAAC,CAAC;EACV;EAEAG,MAAM,GAAG;IACL,MAAM;MAAER;IAAK,CAAC,GAAG,IAAI,CAACD,KAAK;IAE3B,MAAMM,MAAM,GAAGL,IAAI,CAACS,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK;MACtCC,OAAO,CAACC,GAAG,CAACH,KAAK,CAAC;MAClB,oBAAO;QAAA,UAAiBA;MAAK,GAAbC,KAAK;QAAA;QAAA;QAAA;MAAA,QAAc;IACvC,CAAC,CAAC;IAEF,oBAAO;MAAK,SAAS,EAAC,WAAW;MAAA,uBAAC;QAAA,UAAKN;MAAM;QAAA;QAAA;QAAA;MAAA;IAAM;MAAA;MAAA;MAAA;IAAA,QAAM;EAC7D;AACJ;AAEA,eAAeP,GAAG"},"metadata":{},"sourceType":"module"}